{"version":3,"file":"static/js/630.25ab4f26.chunk.js","mappings":"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","sources":["components/redux/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/Contact.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filters.filter;\n\nexport const selectDeletingId = state => state.contacts.deletingId;","import styled from \"@emotion/styled\"\n\nexport const Form = styled.form`\ndisplay: flex;\nflex-direction: column;\nwidth: 200px;\n`\n\nexport const Input = styled.input`\nmargin-bottom: 15px;\nbox-shadow: inner 0 0 4px rgba(0, 0, 0, 0.2);\nborder-radius: 3px;  \n&:focus {\n    outline: none;\n    border-color: blue;\n    box-shadow: 0 0 10px #0000ff;\n  }\n\n`\n\nexport const Label = styled.label`\nmargin-right: 5px;\n\n`\n\nexport const Button = styled.button`\nmargin-left: auto;\nborder-radius: 5px;\nborder-color: grey;\ncursor: pointer;\n&:hover {\n      background-color: blue;\n  }\n`","import { useState } from \"react\"\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../redux/operations';\n\n\n\nimport {Form, Input, Label, Button } from \"./ContactForm.styled\"\n\n\nexport default function ContactForm ()  {\n  const [name, setName] = useState('')\n  const [phone, setPhone] = useState('')\n\n    const dispatch = useDispatch();\n \n  const handleSubmit = event => {\n       event.preventDefault();\n        dispatch(addContact({ name, phone }));\n       reset();\n  }  \n  \n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value)\n        break;\n      \n      case 'phone':\n        setPhone(value)\n        break;\n      default:\n        return\n    }\n  };    \n  \n  const  reset = () => {\n    setName('')\n    setPhone('')\n  }  \n  \n     \n       return (\n        \n           <Form onSubmit={handleSubmit}>\n             <Label >Name\n               <Input\n                 onChange={handleInputChange}\n                 type=\"text\"\n                 value={name}\n                 name=\"name\"\n               \n                 pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                 title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                 required\n               />\n             </Label>\n             <Label >Phone number\n               <Input\n                 onChange={handleInputChange}\n                 type=\"tel\"\n                 value={phone}\n                 name=\"phone\"\n                \n                 pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                 title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                 required\n               />\n            \n             </Label>\n       \n             <Button type=\"submit\" >Add contact</Button>\n           </Form>\n           \n         \n         \n       )\n    }\n\n\n\n\n","import styled from '@emotion/styled'\n\nexport const Input = styled.input`\nbox-shadow: inner 0 0 4px rgba(0, 0, 0, 0.2);\nborder-radius: 3px;  \n&:focus {\n    outline: none;\n    border-color: blue;\n    box-shadow: 0 0 10px #0000ff;\n  }\n\n`\n\n","import { Input } from './Filter.styled'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../redux/filterSlice';\nimport {selectFilter} from '../redux/selectors'\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const defaultSelector = useSelector(selectFilter)\n\n  return (\n    <>\n      <label htmlFor=\"search\"> Find contacts by name: </label>\n      <Input\n        onChange={(e) => {\n                  dispatch(setFilter(e.target.value));\n              }}\n        type=\"text\"\n        id=\"search\"\n        defaultValue={defaultSelector}\n        \n      />\n      </>\n      \n  );\n    \n};\n    \n\n\n","import styled from '@emotion/styled'\n\nexport const ContactsList = styled.ul`\nwidth: 350px;\npadding-left: 5px;\n`\nexport const ContactsListItem = styled.li`\ndisplay: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 0;\n`\nexport const ContactListText = styled.p`\n     margin-top: 0;\n    margin-bottom: 5px;\n    margin-right: 10px;\n`\nexport const Button = styled.button`\n    margin-left: auto;\nborder-radius: 5px;\nborder-color: grey;\ncursor: pointer;\n&:hover {\n      background-color: blue;\n  }\n`\n","import { ContactsList, ContactsListItem, ContactListText, Button } from './ContactList.styled'\nimport { useDispatch,useSelector } from 'react-redux';\nimport { deleteContact } from '../redux/operations';\nimport { selectContacts, selectFilter, selectDeletingId } from '../redux/selectors';\n    \nexport default function ContactList( ) {\n  const dispatch = useDispatch();\n  \n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  \n  const deletingId = useSelector(selectDeletingId);\n\n\nconst filteredContacts = filter\n    ? contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      )\n    : contacts;\n\n  console.log(filteredContacts)\n  return (\n    <ContactsList contact={contacts}>\n      {filteredContacts.map(({name, phone, id})=> (\n        <ContactsListItem key={id}>\n          <ContactListText>{`${name}: ${phone}`}</ContactListText>\n          <Button\n            disabled={id === deletingId}\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(id))}>\n            Delete\n          </Button>\n          \n        </ContactsListItem>\n      ))}         \n    </ContactsList>\n  )\n}\n\n\n    ","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact, deleteContact, fetchContacts } from '../components/redux/operations';\nimport { selectContacts } from '../components/redux/selectors';\n\nimport { GlobalStyle } from '../GlobalStyle';\nimport  ContactForm  from '../components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport  ContactList  from '../components/ContactList/ContactList';\n\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  \n   const onSubmitHandler = (data) => {\n    const isContactExists = contacts.some(\n      (contact) => contact.name === data.name\n    );\n\n    if (isContactExists) {\n      alert(`${data.name} is already in contacts`);\n      return;\n  }\n  \n   const contact = {\n      id: data.id,\n      name: data.name,\n      phone: data.phone,\n    };\n    dispatch(addContact(contact));\n  };\n\n   const onDeleteHandler = (id) => {\n    dispatch(deleteContact(id));\n  };\n\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n        \n      \n     <ContactForm onSubmit={onSubmitHandler} />\n      <Filter />\n      <ContactList onDeleteContact={onDeleteHandler} />\n      <GlobalStyle />\n    </>\n  );\n}"],"names":["selectContacts","state","contacts","items","selectFilter","filters","filter","selectDeletingId","deletingId","Form","styled","Input","Label","Button","ContactForm","useState","name","setName","phone","setPhone","dispatch","useDispatch","handleInputChange","event","currentTarget","value","reset","onSubmit","preventDefault","addContact","onChange","type","pattern","title","required","Filter","defaultSelector","useSelector","htmlFor","e","setFilter","target","id","defaultValue","ContactsList","ContactsListItem","ContactListText","ContactList","filteredContacts","contact","toLowerCase","includes","console","log","map","disabled","onClick","deleteContact","Contacts","useEffect","fetchContacts","data","isContactExists","some","alert","onDeleteContact","GlobalStyle"],"sourceRoot":""}